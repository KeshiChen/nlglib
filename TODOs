Issue: The parser can't cope with more than 5 quantifiers in a formula.

Add a class RefExp that replaces noun phrases (but keeps the phrases inside?)
This is to allow for checking if we referred to something already.

Establish a convention (and change the parser) so that terms are lower case
and predicates are upper case. This will help distinguis between predicate and
a function (Father(x) --> x is a father vs father(x) --> the father of x)


add type of expression to Expr and deduce the type from syntax (EXPR_TERM, ...)
add __len__ to Expr (1 for terms, sum of args for rest? or count ops as well/only?)

When PlaceHolder is used on its own, it does not replace the variable.

add variable context for FOL to NLG
add REG context

allow latex formulas?

BUG: SimpleNLG accepts 'NEGATED'='true' but not 'NEGATED'='TRUE'

write simplenlg realiser and str realiser -- allow setting aggregation, REG, etc.
string realiser should check for punctuation.

Test hashing.

implement function 'unify' that univies the features in a phrase
(eg transfers features from head to its phrase)
this could be perhaps done through setters

change Element.get_feature() to allow better manipulation of features
at the moment get_feature() returns a string so you can't do things like
f = e.get_feature(Gender)
if f == Gender.masculine:
    pass

probably have get(attr) and set(attr, val) and set_feature(f) and get_feature(Feature)
Also has(attr, val) and has_feature(Feature.value)
